start:
    call [prepare_divisors]
    mov r20, 3
    mov r21, 5
.loop:
    mov r1, r20
    call [print_number]
    add r22, r20, r21
    mov r20, r21
    mov r21, r22
    jmp .loop



print_number:
    # Number to print is in r1
    mov r16, 0 # r16 is our digit counter
    mov r15, r30 # Save return address
.gen_digits:
    testnb r16, 20
    jmpf .end_print
    load r2, [r0 + r16 * 8 + divisors]
    call [divmod] # We now have the digit in r1, the remaining number in r2
    add r1, 48
    store r1, byte [SCREEN]
    mov r1, r2
    add r16, 1
    jmp .gen_digits
.end_print:
    mov r1, 0xa
    store r1, [SCREEN]
    mov r30, r15 # Restore return address
    ret


divmod:
    # Begin of divmod function, nominator is in r1, denominator is in r2.
    # Quotient should go into r1, remainder into r2.
    mov r3, 0 # r3 is our subraction counter
.loop:
    testb r1, r2
    jmpf .end
    add r3, 1
    sub r1, r2
    jmp .loop
.end:
    mov r2, r1
    mov r1, r3
    ret


prepare_divisors:
    mov r1, 0 # r1 is the loop counter
    mov r2, 1 # r2 is the divisor
    mov r3, (divisors + 19 * 8) # r3 is the pointer into the divisors array
.loop:
    testnb r1, 20
    jmpf .end
    store r2, [r3]
    add r1, 1
    sub r3, 8
    mul r2, 10
    jmp .loop
.end:
    ret



SCREEN equ 0x10000
divisors equ 0x20000
divisors_temp equ (divisors + 20 * 8)
